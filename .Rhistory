# First stage: Determine fraction, before rounding stuff
knowledge <- (X-zero)/(K-zero)
for (i in 1:N) {
knowledge[i] <- max(knowledge[i],0)
if (knowledge[i] < pass) {frac[i] <- min.grade + knowledge[i]*(5.5-min.grade)/pass
} else {
frac[i] <- 5.5 + ((knowledge[i]-pass)/(1-pass)) * (10-5.5)
}
}
# Stage 2: the rounding
grade <- round(2*frac)/2
for (i in 1:N) {
if (grade[i] == 5.5 & frac[i] < 5.5) {grade[i] <- 5}
if (grade[i] == 5.5 & frac[i] > 5.4999999) {grade[i] <- 6}
}
cbind(X,knowledge,frac,grade)
}
# results <- cbind(results, data.frame(X = NA, knowledge = NA, frac = NA, grade = NA))
#
# results[results$major %in% c("SS", "BE"), c("X", "knowledge", "frac", "grade")] <- grademc(results$score[results$major %in% c("SS", "BE")], K = 35, min.grade = 1)
#
# results[results$major %in% c("CN"), c("X", "knowledge", "frac", "grade")] <- grademc(results$score[results$major %in% c("CN")], K = 34, min.grade = 1)
results$Grade <- results$score / 35
results$Grade[results$major == "CN"] <- results$score[results$major == "CN"] / 34
results$Grade <- round_grades(results$Grade*10)
prop.table(table(results$Grade > 5.5))
# Email students ----------------------------------------------------------
students <- read.csv("C:/Users/vanlissa/OneDrive - Tilburg University/TU/Statistics 1 and 2 (LAS) - documenten/2023/portfolio3_grades.csv", stringsAsFactors = F)[, c("SIS.User.ID", "Name", "email")]
results$SIS.User.ID <- results$externalid
results <- merge(results, students, by = "SIS.User.ID", all = TRUE)
View(results)
results <- results[!is.na(results$Grade), ]
View(results)
round_grades <- function(x){
fraction <- x %% 1
wholegrade <- x-fraction
out <- wholegrade
isfive <- x >= 4.75 & x < 5.5
out[isfive] <- 5 #  indien de uitkomst van het rekenkundig gemiddelde ≥ 4,75 en < 5,5 dan resulteert het   eindcijfer in een 5,0;
issix <- x >= 5.5 & x < 6.25
out[issix] <- 6 # indien de uitkomst van het rekenkundig gemiddelde ≥ 5,5 en < 6,25 dan resulteert het eindcijfer in een 6,0;
notfiveorsix <- !(isfive|issix)
addthis <- rep(0, length(x)) #  < 0,25 wordt naar beneden afgerond
addthis[notfiveorsix & fraction >= .25 & fraction < .75] <- .5 # ≥ 0,25 en < 0,75 wordt naar 0,5 afgerond
addthis[notfiveorsix & fraction >= .75] <- 1 # ≥ 0,75 wordt naar boven afgerond.
return(out+addthis)
}
f <- list.files("C:/Users/vanlissa/OneDrive - Tilburg University/TU/Statistics 1 and 2 (LAS) - documenten/2023/exam", "csv$", full.names = T)
f <- lapply(f, read.csv, stringsAsFactors = F, header = F, skip = 1, encoding = "UTF-8")
results <- rbind(f[[1]], f[[2]])
#subscores(nr|blockname|score|maxscore|percentage)
results <- results[, c(3, 4, 5, 14, 33, 38, 43, 48)]
names(results) <- c("loginname",	"displayname",	"externalid", "score", "common", "CN", "BE", "SS")
results <- results[-which(is.na(results$score)), ]
# tmp <- results[rowSums(results[, c("CN", "BE", "SS")], na.rm = T) == 0, ]
results$major <- c("CN", "BE", "SS")[apply(results[, c("CN", "BE", "SS")] > 0, 1, which)]
### Formula for grading MC exams
### NOTE: - This script represents the reference implementation of the scoring
###         rule implemented in the scoreExam() function.
###       - This script was provided by Marcel van Assen on 2020-10-13
###       - This script is not used for any actual calculations.
grademc <- function(X, K, a = 4, min.grade = 0, pass = .55){
# Parameters characterizing test
# K <- 40   # number of questions
# a <- 4    # number of answering categories per question
zero <- K/a
# Parameters determined by the examiner / faculty
# min.grade <- 1  # For TisEM: min.grade = 1
#                 # For all other faculties: min.grade = 0
# pass <- 0.55    # Default knowledge = .55, users can select another value
# example INPUT SCORES of students
#X <- 5:40
N <- length(X)
grade <- frac <- 0*1:N
# Grading based on example
# Two stages
# First stage: Determine fraction, before rounding stuff
knowledge <- (X-zero)/(K-zero)
for (i in 1:N) {
knowledge[i] <- max(knowledge[i],0)
if (knowledge[i] < pass) {frac[i] <- min.grade + knowledge[i]*(5.5-min.grade)/pass
} else {
frac[i] <- 5.5 + ((knowledge[i]-pass)/(1-pass)) * (10-5.5)
}
}
# Stage 2: the rounding
grade <- round(2*frac)/2
for (i in 1:N) {
if (grade[i] == 5.5 & frac[i] < 5.5) {grade[i] <- 5}
if (grade[i] == 5.5 & frac[i] > 5.4999999) {grade[i] <- 6}
}
cbind(X,knowledge,frac,grade)
}
# results <- cbind(results, data.frame(X = NA, knowledge = NA, frac = NA, grade = NA))
#
# results[results$major %in% c("SS", "BE"), c("X", "knowledge", "frac", "grade")] <- grademc(results$score[results$major %in% c("SS", "BE")], K = 35, min.grade = 1)
#
# results[results$major %in% c("CN"), c("X", "knowledge", "frac", "grade")] <- grademc(results$score[results$major %in% c("CN")], K = 34, min.grade = 1)
results$Grade <- results$score / 35
results$Grade[results$major == "CN"] <- results$score[results$major == "CN"] / 34
results$Grade <- round_grades(results$Grade*10)
prop.table(table(results$Grade > 5.5))
# Email students ----------------------------------------------------------
students <- read.csv("C:/Users/vanlissa/OneDrive - Tilburg University/TU/Statistics 1 and 2 (LAS) - documenten/2023/portfolio3_grades.csv", stringsAsFactors = F)[, c("SIS.User.ID", "Name", "email")]
results$SIS.User.ID <- results$externalid
results <- merge(results, students, by = "SIS.User.ID", all = TRUE)
results <- results[!is.na(results$Grade), ]
results
View(results)
thisrow <- results[i, ]
i=15
thisrow <- results[i, ]
thisrow[1,"email"]
paste0("Dear ", thisrow["Name"], ",")
thisrow["Grade"]
View(results)
View(f)
thisrow
thisrow[1, "common"]
sum(thisrow[1, c("CN", "BE", "SS")])
paste0("For the common part, you made ", thisrow[1, "common"], " out of 25 questions correctly, and for the major-specific part you made ", sum(thisrow[1, c("CN", "BE", "SS")]), " questions correctly.")
cat(paste0(c(paste0("Dear ", thisrow["Name"], ","),
"I just finished grading the multiple choice exam; I know it's a little awkward to send them the day before Christmas because I don't want to distract you from a well-deserved break and celebration, but I do feel like you deserve to know the grade as soon as possible.\n\n",
paste0("Exam grade: ", thisrow["Grade"]),
c("Well done, you passed the exam!", "Unfortunately, this falls short of the minimum grade to pass the course (you need at least a 5.5 for both the Portfolio and the Exam). There is an opportunity for a resit after the holiday; I really hope you can pass the course on the second try.\n")[(as.numeric(thisrow["Grade"]) < 5.5)+1],
paste0("For the common part, you made ", thisrow[1, "common"], " out of 25 questions correctly, and for the major-specific part you made ", sum(thisrow[1, c("CN", "BE", "SS")]), " questions correctly.\n"),
"A few corrections were made: For CN, the question about the adjusted mean, there was no correct answer in the set. For SS, the question about rotation in factor analysis, there were two identical correct answers. For the common part, the question about basketball teams, the question explicitly stated that you had to round your answer to whole numbers. Some of you instead took the lowest number, which is incorrect, but I've decided to count both answers correct anyway.\n",
"Wishing you very happy holidays,",
"Caspar"
), collapse = "\n"
))
cat(paste0(c(paste0("Dear ", thisrow["Name"], ","),
"I just finished grading the multiple choice exam; I know it's a little awkward to send them the day before Christmas because I don't want to distract you from a well-deserved break and celebration, but I do feel like you deserve to know the grade as soon as possible.\n\n",
paste0("Exam grade: ", thisrow["Grade"]),
c("Well done, you passed the exam!", "Unfortunately, this falls short of the minimum grade to pass the course (you need at least a 5.5 for both the Portfolio and the Exam). There is an opportunity for a resit after the holiday; I really hope you can pass the course on the second try.\n")[(as.numeric(thisrow["Grade"]) < 5.5)+1],
paste0("For the common part, you made ", thisrow[1, "common"], " out of 25 questions correctly, and for the major-specific part you made ", sum(thisrow[1, c("CN", "BE", "SS")]), " questions correctly.\n"),
"A few corrections were made: For CN, the question about the adjusted mean, there was no correct answer in the set. For SS, the question about rotation in factor analysis, there were two identical correct answers. For the common part, the question about basketball teams, the question explicitly stated that you had to round your answer to whole numbers. Some of you instead took the lowest number, which is incorrect, but I've decided to count both answers correct anyway.\n",
"Wishing you very happy holidays,",
"Caspar"
), collapse = "\n\n"
))
for(i in 1:nrow(portfolios)){
thisrow <- results[i, ]
outMail = OutApp$CreateItem(0)
outMail[["subject"]] = "Grades MC Exam"
outMail[["To"]] = thisrow[1,"email"]
outMail[["body"]] =
paste0(c(paste0("Dear ", thisrow["Name"], ","),
"I just finished grading the multiple choice exam; I know it's a little awkward to send them the day before Christmas because I don't want to distract you from a well-deserved break and celebration, but I also feel like you deserve to know the grade as soon as possible.",
paste0("Exam grade: ", thisrow["Grade"]),
c("Well done, you passed the exam!", "Unfortunately, this falls short of the minimum grade to pass the course (you need at least a 5.5, which is rounded to a 6, for both the Portfolio and the Exam). There is an opportunity for a resit after the holiday; I really hope you can pass the course on the second try.\n")[(as.numeric(thisrow["Grade"]) < 5.5)+1],
paste0("For the common part, you made ", thisrow[1, "common"], " out of 25 questions correctly, and for the major-specific part you made ", sum(thisrow[1, c("CN", "BE", "SS")]), " questions correctly.\n"),
"A few corrections were made: For CN, the question about the adjusted mean was dropped because there was no correct answer in the set. For SS, the question about rotation in factor analysis, there were two identical correct answers. For the common part, the question about basketball teams, the question explicitly stated that you had to round your answer to whole numbers. Some of you instead took the lowest number, which is incorrect, but I've decided to count both answers correct anyway.\n",
"Wishing you very happy holidays,",
"Caspar"
), collapse = "\n\n"
)
## send it
outMail$Send()
Sys.sleep(2)
}
library("RDCOMClient")
OutApp <- COMCreate("Outlook.Application")
for(i in 1:nrow(results)){
thisrow <- results[i, ]
outMail = OutApp$CreateItem(0)
outMail[["subject"]] = "Grades MC Exam"
outMail[["To"]] = thisrow[1,"email"]
outMail[["body"]] =
paste0(c(paste0("Dear ", thisrow["Name"], ","),
"I just finished grading the multiple choice exam; I know it's a little awkward to send them the day before Christmas because I don't want to distract you from a well-deserved break and celebration, but I also feel like you deserve to know the grade as soon as possible.",
paste0("Exam grade: ", thisrow["Grade"]),
c("Well done, you passed the exam!", "Unfortunately, this falls short of the minimum grade to pass the course (you need at least a 5.5, which is rounded to a 6, for both the Portfolio and the Exam). There is an opportunity for a resit after the holiday; I really hope you can pass the course on the second try.\n")[(as.numeric(thisrow["Grade"]) < 5.5)+1],
paste0("For the common part, you made ", thisrow[1, "common"], " out of 25 questions correctly, and for the major-specific part you made ", sum(thisrow[1, c("CN", "BE", "SS")]), " questions correctly.\n"),
"A few corrections were made: For CN, the question about the adjusted mean was dropped because there was no correct answer in the set. For SS, the question about rotation in factor analysis, there were two identical correct answers. For the common part, the question about basketball teams, the question explicitly stated that you had to round your answer to whole numbers. Some of you instead took the lowest number, which is incorrect, but I've decided to count both answers correct anyway.\n",
"Wishing you very happy holidays,",
"Caspar"
), collapse = "\n\n"
)
## send it
outMail$Send()
Sys.sleep(2)
}
library("RDCOMClient")
OutApp <- COMCreate("Outlook.Application")
for(i in 1:nrow(results)){
thisrow <- results[i, ]
outMail = OutApp$CreateItem(0)
outMail[["subject"]] = "Grades MC Exam"
outMail[["To"]] = thisrow[1,"email"]
outMail[["body"]] =
paste0(c(paste0("Dear ", thisrow["Name"], ","),
"I just finished grading the multiple choice exam; I know it's a little awkward to send them the day before Christmas because I don't want to distract you from a well-deserved break and celebration, but I also feel like you deserve to know the grade as soon as possible.",
paste0("Exam grade: ", thisrow["Grade"]),
c("Well done, you passed the exam!", "Unfortunately, this falls short of the minimum grade to pass the course (you need at least a 5.5, which is rounded to a 6, for both the Portfolio and the Exam). There is an opportunity for a resit after the holiday; I really hope you can pass the course on the second try.\n")[(as.numeric(thisrow["Grade"]) < 5.5)+1],
paste0("For the common part, you made ", thisrow[1, "common"], " out of 25 questions correctly, and for the major-specific part you made ", sum(thisrow[1, c("CN", "BE", "SS")]), " questions correctly.\n"),
"A few corrections were made: For CN, the question about the adjusted mean was dropped because there was no correct answer in the set. For SS, the question about rotation in factor analysis, there were two identical correct answers. For the common part, the question about basketball teams, the question explicitly stated that you had to round your answer to whole numbers. Some of you instead took the lowest number, which is incorrect, but I've decided to count both answers correct anyway.\n",
"Wishing you very happy holidays,",
"Caspar"
), collapse = "\n\n"
)
## send it
outMail$Send()
Sys.sleep(2)
}
f <- list.files("C:/Users/vanlissa/OneDrive - Tilburg University/TU/Statistics 1 and 2 (LAS) - documenten/2023/exam", "csv$", full.names = T)
f <- lapply(f, read.csv, stringsAsFactors = F, header = F, skip = 1, encoding = "UTF-8")
results <- rbind(f[[1]], f[[2]])
View(results)
namz <- read.csv(f[[1]], full.names = T)
f <- list.files("C:/Users/vanlissa/OneDrive - Tilburg University/TU/Statistics 1 and 2 (LAS) - documenten/2023/exam", "csv$", full.names = T)
namz <- read.csv(f[[1]], full.names = T)
namz <- read.csv(f[[1]])
f <- list.files("C:/Users/vanlissa/OneDrive - Tilburg University/TU/Statistics 1 and 2 (LAS) - documenten/2023/exam", "csv$", full.names = T)
namz <- read.csv(f[[1]])
namz <- read.csv(f[[1]], header = F, nrows = 1)
namz
namz <- unlist(read.csv(f[[1]], header = F, nrows = 1))
namz
strsplit(gsub("^.+?\\((.+?)\\)", "\\1", tail(namz, 1)), "|", fixed = T)
strsplit(gsub("^.+?\\((.+?)\\)", "\\1", tail(namz, 1)), "|", fixed = T)[[1]]
namz <- namz[-length(namz)]
namz <- unlist(read.csv(f[[1]], header = F, nrows = 1))
finalnam <- strsplit(gsub("^.+?\\((.+?)\\)", "\\1", tail(namz, 1)), "|", fixed = T)[[1]]
namz <- namz[-length(namz)]
f <- lapply(f, read.csv, stringsAsFactors = F, header = F, skip = 1, encoding = "UTF-8")
results <- rbind(f[[1]], f[[2]])
View(results)
worcs::git_update()
format(Sys.Date(), format = "%Y")
as.integer(format(Sys.Date(), format = "%Y"))+1
paste0(format(Sys.Date(), format = "%Y"), "-", as.integer(format(Sys.Date(), format = "%Y"))+1)
startpath <- "c:/goth music/complete"
f <- list.dirs(startpath)[-1]
#f <- f[!grepl("goth music\\/(complete|downloading)", f)]
no_highlights <- f[!file.exists(file.path(f, "highlights.txt"))]
utils::browseURL(sample(no_highlights, 1))
records <- readLines("c:/goth music/records.txt")
grep("nacht der", records, value = T, ignore.case = T)
startpath <- "c:/goth music/complete"
f <- list.dirs(startpath)[-1]
#f <- f[!grepl("goth music\\/(complete|downloading)", f)]
no_highlights <- f[!file.exists(file.path(f, "highlights.txt"))]
utils::browseURL(sample(no_highlights, 1))
grep("lost alone", records, value = T, ignore.case = T)
startpath <- "c:/goth music/complete"
f <- list.dirs(startpath)[-1]
#f <- f[!grepl("goth music\\/(complete|downloading)", f)]
no_highlights <- f[!file.exists(file.path(f, "highlights.txt"))]
utils::browseURL(sample(no_highlights, 1))
grep("blumen", records, value = T, ignore.case = T)
startpath <- "c:/goth music/complete"
f <- list.dirs(startpath)[-1]
#f <- f[!grepl("goth music\\/(complete|downloading)", f)]
no_highlights <- f[!file.exists(file.path(f, "highlights.txt"))]
utils::browseURL(sample(no_highlights, 1))
grep("subtractive", records, value = T, ignore.case = T)
worcs::git_update()
worcs::git_update()
gert::git_push()
worcs::git_up
git_update()
worcs::git_update()
worcs::git_update()
install.packages("worcs")
dput(readClipboard(), "clipboard")
renv::init()
renv::init(bare = TRUE)
renv::status()
renv::install("rmarkdown")
readLines("renv.lock")
f <- list.files(pattern = "\\.(qmd|r)$", full.names = TRUE, ignore.case = TRUE)
f
renv::dependencies(path = f)
renv::snapshot()
settings$snapshot.type()
renv::settings$snapshot.type()
renv::init()
writeLines("/py_env # excludes the py_env directory", ".renvignore")
utils::browseURL(".renvignore")
list.dirs()
list.dirs(recursive = FALSE)
list.dirs(recursive = FALSE) -> f
f <- gsub("^\\.", "", f)
f
write(f, ".gitignore", append = TRUE, sep = "\n")
write(f, ".renvignore", append = TRUE, sep = "\n")
renv::init()
install.packages("glossary")
install.packages("cjvanlissa/webexercises")
renv::status()
renv::snapshot()
renv::snapshot()
install.packages("downlit")
renv::snapshot()
writeLines("library(downlit)", "deps.R")
install.packages("xml2")
renv::snapshot()
renv::snapshot()
library(downlit)
library(xml2)
renv::snapshot()
knitr:::webshot_available()
install.packages("webshot2")
knitr:::webshot_available()
test("webshot2", "find_chrome",
"chromote")
install.packages("webshot")
webshot::install_phantomjs()
webshot::install_phantomjs(force = TRUE)
webshot::is_phantomjs_installed()
knitr:::webshot_available()
knitr:::webshot_available()
install.packages("rstudio/webshot2")
knitr:::webshot_available()
install.packages("usethis")
usethis::edit_r_environ()
knitr:::webshot_available()
webshot2::webshot("https://stackoverflow.com/questions/49738564/r-set-environment-variable-permanently")
Sys.setenv(CHROMOTE_CHROME = "C:\Users\vanlissa\AppData\Local\Google\Chrome\Application\chrome.exe")
Sys.setenv(CHROMOTE_CHROME = "C:/Users/vanlissa/AppData/Local/Google/Chrome/Application/chrome.exe")
webshot2::webshot("https://stackoverflow.com/questions/49738564/r-set-environment-variable-permanently")
knitr:::webshot_available()
worcs::git_update()
install.packages("worcs")
renv::snapshot()
worcs::git_update()
file.edit("index.qmd")
file.edit("statistics1.qmd")
tmp <- read.table("clipboard", sep = "\t")
View(tmp)
tmp$Date <- as.Date(tmp$V1, format = "%d/%m/%y")
View(tmp)
tmp <- read.csv("C:/tmp/TimeEdit_840141-B-6_SM_1_Statistics_1_LAS_2025-08-15_07_51.csv")
tmp <- read.csv("C:/tmp/TimeEdit_840141-B-6_SM_1_Statistics_1_LAS_2025-08-15_07_51.csv")
tmp$Date <- as.Date(tmp$Start.datum, format = "%d-%m-%Y")
View(tmp)
tmp$Date[which(is.na(tmp$Date))]
tmp$Date[which(is.na(tmp$Date))] <- as.Date(tmp$Start.datum[which(is.na(tmp$Date))], format = "%d/%m/%y")
dput(unique(tmp$Docent.en.), "clipboard")
tmp$Activity <- factor(tmp$Docent.en., levels = c("A. Bouma, C.J. van Lissa", "S.A. Rezazadeh", "C.J. van Lissa"
), labels = c("Lecture", "Tutorial", "Lecture"))
table(tmp$Activity)
table(tmp$Activity)/3
tmp$Major <- "all"
tmp$Bijzonderheden
tmp$Major[tmp$Activity == "Tutorial"] <- c("CN", "BE", "SS")
tmp$Week <- strftime(tmp$Date, format = "%V")
tmp$Day <- strftime(tmp$Date, format = "%A")
dput(names(tmp), "clipboard")
sched <- tmp[, c("Week", "Day", "Activity", "Major")]
writeClipboard(sched)
write.table(sched, "clipboard", sep = "\t", quote = FALSE, header = FALSE, row.names = FALSE)
write.table(sched, "clipboard", sep = "\t", quote = FALSE, col.names = FALSE, row.names = FALSE)
sched <- sched[order(sched$Week, sched$Activity), ]
View(sched)
sched <- sched[order(sched$Activity, sched$Week), ]
write.table(sched, "clipboard", sep = "\t", quote = FALSE, col.names = FALSE, row.names = FALSE)
list.files(pattern = ".txt")
file.edit("amirali.txt")
tmp <- read.table("clipboard", sep = "\t")
tmp
tmp2 <- read.table("clipboard", sep = "\t")
tmp2
tmp$Topic <- rep(tmp2$V1, each = 3)
tmp$Topic <- rep(tmp2$V1[1:13], each = 3)
tmp$Topic[1:39] <- rep(tmp2$V1[1:13], each = 3)
tmp$Topic <- NA
tmp$Topic[1:39] <- rep(tmp2$V1[1:13], each = 3)
write.table(tmp, "clipboard", sep = "\t", quote = FALSE, col.names = FALSE, row.names = FALSE)
schedule <- read.csv("schedule_2025.csv")[, 1:4]
schedule <- read.csv("schedule_2025.csv")[, 1:5]
schedule <- read.csv("schedule_2025.csv")[, 1:6]
schedule <- read.csv("schedule_2025.csv")[, 1:6]
schedule$Date <- as.Date(paste(2025, (schedule$Week-1), 1, sep="-"), "%Y-%U-%u")
addthis <- c(0:5)
names(addthis) <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
schedule$Date <- schedule$Date+addthis[schedule$Day]
View(schedule)
schedule <- read.csv("schedule_2025.csv")[, 1:6]
schedule$Date <- as.Date(paste(2025, (schedule$Week-1), 1, sep="-"), "%Y-%U-%u")
addthis <- c(0:5)
names(addthis) <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
schedule$Date <- schedule$Date+addthis[schedule$Day]
schedule <- schedule[!is.na(schedule$Week), c("Week", "Activity", "Date", "Topic")]
ordr <- order(schedule$Date, decreasing = FALSE)
schedule$Date <- format(schedule$Date, format = "%d-%m-%Y")
schedule <- read.csv("schedule_2025.csv")[, 1:6]
schedule$Date <- as.Date(paste(2025, (schedule$Week-1), 1, sep="-"), "%Y-%U-%u")
addthis <- c(0:5)
names(addthis) <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
schedule$Date <- schedule$Date+addthis[schedule$Day]
schedule$Topic
schedule$Topic[which(!is.na(schedule$Link))]
schedule$Link
schedule$Topic[which(!schedule$Link == "")]
glue::glue("<a href='{schedule$Link[which(!schedule$Link == "")]>{schedule$Topic[which(!schedule$Link == "")]}</a>}'")
glue::glue("<a href='{schedule$Link[which(!schedule$Link == '')]>{schedule$Topic[which(!schedule$Link == '')]}</a>}'")
schedule$Link[which(!schedule$Link == '')]
schedule$Topic[which(!schedule$Link == '')]
paste0("<a href='", schedule$Link[which(!schedule$Link == '')], "'>", schedule$Topic[which(!schedule$Link == '')], "</a>")
schedule$Topic[which(!schedule$Link == "")] <- paste0("<a href='", schedule$Link[which(!schedule$Link == '')], "'>", schedule$Topic[which(!schedule$Link == '')], "</a>")
schedule <- schedule[!is.na(schedule$Week), c("Week", "Activity", "Date", "Topic")]
ordr <- order(schedule$Date, decreasing = FALSE)
schedule$Date <- format(schedule$Date, format = "%d-%m-%Y")
suppressWarnings(library(DT))
# library(lubridate)
# mdy(isoweek(4))
# lubridate::isoweek(as.Date("13-09-2021", format = "%d-%m-%Y"))
# lubridate::parse_date_time("37", orders = "%W")
# lubridate::isoweek(as.Date("13-09-2021", format = "%d-%m-%Y"))
DT::datatable(schedule[ordr, ], rownames = FALSE, options = list(pageLength = nrow(schedule)), escape = FALSE)
knitr::is_html_output()
worcs::git_update()
file.edit("_quarto.yml")
file.rename("week_10.qmd", "glm_assumptions.qmd")
file.remove("instructions.qmd")
f <- readClipboard()
f
f <- gsub("^.+ ", "", f)
f
thisf = f
lnz <- readLines(thisf)
thisf
thisf
thisf = f[1]
lnz <- readLines(thisf)
head(lnz)
heads <- grepl("^#", lnz)
heads
headtxt <- gsub("(?<=# ).*$", "", heads)
headtxt <- gsub("(?<=# ).*$", "", heads, perl = TRUE)
headtxt
headtxt <- gsub("(?<=# ).*$", "", lnz[heads], perl = TRUE)
headtxt
nchar(headtxt)
sum(nchar(headtxt) == 2)
for(thisf in f){
lnz <- readLines(thisf)
heads <- grepl("^#", lnz)
headtxt <- gsub("(?<=# ).*$", "", lnz[heads], perl = TRUE)
if(sum(nchar(headtxt) == 2) > 1){
browser()
}
}
thisf
lnz[heads]
lnz <- readLines(thisf)
heads <- grepl("^#{1,} ", lnz)
heads
lnz[heads]
heads
heads <- grepl("^#{1,} ", lnz) & !grepl("(\\(|::)", lnz[heads])
heads <- grepl("^#{1,} ", lnz) & !grepl("(\\(|::)", lnz)
lnz[heads]
q
stop
q
for(thisf in f){
lnz <- readLines(thisf)
heads <- grepl("^#{1,} ", lnz) & !grepl("(\\(|::)", lnz)
headtxt <- gsub("(?<=# ).*$", "", lnz[heads], perl = TRUE)
if(sum(nchar(headtxt) == 2) > 1){
browser()
}
}
thisf
lnz[heads]
heads
which(heads)
which(heads)[-1]
lnz[which(heads)[-1]] <- paste0("#", lnz[which(heads)[-1]])
lnz
for(thisf in f){
lnz <- readLines(thisf)
heads <- grepl("^#{1,} ", lnz) & !grepl("(\\(|::)", lnz)
headtxt <- gsub("(?<=# ).*$", "", lnz[heads], perl = TRUE)
if(sum(nchar(headtxt) == 2) > 1){
lnz[which(heads)[-1]] <- paste0("#", lnz[which(heads)[-1]])
writeLines(lnz)
}
}
for(thisf in f){
lnz <- readLines(thisf)
heads <- grepl("^#{1,} ", lnz) & !grepl("(\\(|::)", lnz)
headtxt <- gsub("(?<=# ).*$", "", lnz[heads], perl = TRUE)
if(sum(nchar(headtxt) == 2) > 1){
lnz[which(heads)[-1]] <- paste0("#", lnz[which(heads)[-1]])
writeLines(lnz)
}
}
for(thisf in f){
print(thisf)
lnz <- readLines(thisf)
heads <- grepl("^#{1,} ", lnz) & !grepl("(\\(|::)", lnz)
headtxt <- gsub("(?<=# ).*$", "", lnz[heads], perl = TRUE)
if(sum(nchar(headtxt) == 2) > 1){
lnz[which(heads)[-1]] <- paste0("#", lnz[which(heads)[-1]])
writeLines(lnz)
}
}
for(thisf in f){
print(thisf)
lnz <- readLines(thisf)
heads <- grepl("^#{1,} ", lnz) & !grepl("(\\(|::)", lnz)
headtxt <- gsub("(?<=# ).*$", "", lnz[heads], perl = TRUE)
if(sum(nchar(headtxt) == 2) > 1){
lnz[which(heads)[-1]] <- paste0("#", lnz[which(heads)[-1]])
writeLines(lnz, thisf)
}
}
file.edit("make_syllabus.r")
